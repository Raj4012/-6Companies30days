There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

age[y] <= 0.5 * age[x] + 7
age[y] > age[x]
age[y] > 100 && age[x] < 100
Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.

 

Example 1:

Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: ages = [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

Code starts from here;;
import java.util.Arrays;

class Solution {
    public int numFriendRequests(int[] ages) {
        Arrays.sort(ages); 
        int totRequests = 0;

        for (int i = 0; i < ages.length; i++) {
            if (ages[i] < 15) continue; 
            
            int minAge = (int) (0.5 * ages[i] + 7);
            
           
            int left = findLowerBound(ages, minAge + 1);
            int right = findUpperBound(ages, ages[i]);
            
            if (right > left) {
                totRequests += (right - left - 1);
            }
        }

        return totRequests;
    }

   
    private int findLowerBound(int[] ages, int minAge) {
        int left = 0, right = ages.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (ages[mid] >= minAge) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    
    private int findUpperBound(int[] ages, int maxAge) {
        int left = 0, right = ages.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (ages[mid] > maxAge) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    
}
