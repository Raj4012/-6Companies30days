Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

 

Example 1:

example-1
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.
Example 2:

Input: s = "bb"
Output: 1
Explanation: An optimal solution is to choose "b" (the first character) for the 1st subsequence and "b" (the second character) for the 2nd subsequence.
The product of their lengths is: 1 * 1 = 1.
Example 3:

Input: s = "accbcaxxcxx"
Output: 25
Explanation: An optimal solution is to choose "accca" for the 1st subsequence and "xxcxx" for the 2nd subsequence.
The product of their lengths is: 5 * 5 = 25.

Code starts from here;
class Solution {
    // Helper method to check if a string is palindromic
    private boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }

    public int maxProduct(String s) {
        int n = s.length();
        int maxProduct = 0;

        
        for (int mask1 = 1; mask1 < (1 << n); mask1++) {
            StringBuilder sb1 = new StringBuilder();
            for (int i = 0; i < n; i++) {
                if ((mask1 & (1 << i)) != 0) sb1.append(s.charAt(i));
            }

            if (isPalindrome(sb1.toString())) {
                for (int mask2 = 1; mask2 < (1 << n); mask2++) {
                    // Ensure mask1 and mask2 are disjoint
                    if ((mask1 & mask2) == 0) {
                        StringBuilder sb2 = new StringBuilder();
                        for (int i = 0; i < n; i++) {
                            if ((mask2 & (1 << i)) != 0) sb2.append(s.charAt(i));
                        }

                        if (isPalindrome(sb2.toString())) {
                            int product = sb1.length() * sb2.length();
                            maxProduct = Math.max(maxProduct, product);
                        }
                    }
                }
            }
        }

        return maxProduct;
    }
}
