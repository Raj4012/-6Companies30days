Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.

Code starts from here;;

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        //freq count for each word

        Map<String, Integer> freqMap = new HashMap<>();
        for(String word : words){
            freqMap.put(word, freqMap.getOrDefault(word,0) + 1);
        }
        //priority queue

        PriorityQueue<String> pq = new PriorityQueue<>((word1, word2) ->{
            int freq1 = freqMap.get(word1);
            int freq2 = freqMap.get(word2);

            if(freq1 == freq2){
                return word2.compareTo(word1);
            }
            return freq1 - freq2;
        });

        //add element to the heap
        for(String word : freqMap.keySet()){
            pq.offer(word);
            if(pq.size() > k){
                pq.poll();
            }
        }
        //extract elements from the heap

        List<String> result = new ArrayList<>();
        while(!pq.isEmpty()){
            result.add(pq.poll());
        }
        //reverse the list to get the correct order

        Collections.reverse(result);

        return result;
    }
}
