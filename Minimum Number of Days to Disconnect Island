You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell (1) into a water cell (0).

Return the minimum number of days to disconnect the grid.

Code starts from here;;;

class Solution {
    public int minDays(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        //grid--> already disconnected

        if(countIslands(grid) != 1){
            return 0;

        }

        //changing one land cell to water

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                    if(countIslands(grid) != 1){
                        return 1;

                    }
                    grid[i][j] = 1;
                }
            }
        }
        return 2;

    }
    private int countIslands(int[][] grid){
        int rows = grid.length;
        int cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];
        int islandCount = 0;

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == 1 && !visited[i][j]){
                    islandCount++;
                    if(islandCount > 1){
                        return islandCount;
                    }
                    dfs(grid, visited, i, j);
                }
            }
        }
        return islandCount;
    }
    private void dfs(int[][] grid, boolean[][] visited, int row, int col){
        int rows = grid.length;
        int cols = grid[0].length;
        int[] dRow = {-1,1,0,0};
        int[] dCol = {0,0,-1,1};

        visited[row][col] = true;

        for(int k = 0; k < 4; k++){
            int newRow = row + dRow[k];
            int newCol = col + dCol[k];

            if(newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1 && !visited[newRow][newCol]){
                dfs(grid, visited, newRow, newCol);
            }
        }
    }
    public static void main(String args[]){
        Solution s = new Solution();

        int [][] grid1 = { {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0,0 }};
        System.out.println(s.minDays(grid1));

        int[][] grid2 = {{1,1}};
        System.out.println(s.minDays(grid2));
    }
}
