You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].

You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.

Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.

Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].

 

Example 1:

Input: source = "abcd", target = "acbe", original = ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost = [2,5,5,1,2,20]
Output: 28
Explanation: To convert the string "abcd" to string "acbe":
- Change value at index 1 from 'b' to 'c' at a cost of 5.
- Change value at index 2 from 'c' to 'e' at a cost of 1.
- Change value at index 2 from 'e' to 'b' at a cost of 2.
- Change value at index 3 from 'd' to 'e' at a cost of 20.
The total cost incurred is 5 + 1 + 2 + 20 = 28.
It can be shown that this is the minimum possible cost.
Example 2:

Input: source = "aaaa", target = "bbbb", original = ["a","c"], changed = ["c","b"], cost = [1,2]
Output: 12
Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.
Example 3:

Input: source = "abcd", target = "abce", original = ["a"], changed = ["e"], cost = [10000]
Output: -1
Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.

Code Starts from here,
class Solution {
    class comp implements Comparator<long[]>{
        public int compare(long[] x, long[] y){
            return Long.compare(x[1],y[1]);
        }
    }
    public long dijkstra(List<List<long[]>>adj, long src, long des){
        PriorityQueue<long[]> pq= new PriorityQueue<>(new comp()); pq.add(new long[]{src,0});
        long[] dis= new long[26]; Arrays.fill(dis,Long.MAX_VALUE); dis[(int)src]=0;
        while(!pq.isEmpty()){
            long[] temp= pq.poll();
            long p_node= temp[0], p_cost= temp[1];
            for(long[] tempo: adj.get((int)p_node)){
                long c_node= tempo[0], c_cost= tempo[1];
                if(dis[(int)c_node] > p_cost + c_cost){
                    dis[(int)c_node]= p_cost + c_cost;
                    pq.add(new long[]{c_node,dis[(int)c_node]});
                }
            }
        }
        if(dis[(int)des]==Long.MAX_VALUE) return -1;
        return dis[(int)des];
    }
    public long using_dijkstra_algo(String source, String target, char[] original, char[] changed, int[] cost){
        List<List<long[]>> adj= new ArrayList<>(); 
        for(int i=0;i<26;i++) adj.add(new ArrayList<>());
        int original_len= original.length;
        for(int i=0;i<original_len;i++){
            long o_ind= original[i]-'a';
            long c_ind= changed[i]-'a';
            long price= cost[i];
            adj.get((int)o_ind).add(new long[]{c_ind,price});
        }
        long ans=0;
        long src_len= source.length();
        for(int i=0;i<src_len;i++){
            long src= source.charAt(i)-'a';
            long des= target.charAt(i)-'a';
            long res= dijkstra(adj,src,des);
            if(res==-1) return -1;
            ans+=res;
        }
        return ans;
    }
    public long using_floyd_warshall_algo(String source, String target, char[] original, char[] changed, int[] cost){
        long[][] dis= new long[26][26];
        long maxi=(long)Math.pow(10,10);
        for(long[] i:dis) Arrays.fill(i, maxi);
        int n=original.length;
        for(int i=0;i<26;i++) dis[i][i]=0;
        for(int i=0;i<n;i++){
            int src= original[i]-'a', des= changed[i]-'a';
            dis[src][des]= Math.min(dis[src][des],cost[i]);
        }
        for(int k=0;k<26;k++){
            for(int s=0;s<26;s++){
                for(int d=0;d<26;d++){
                    if(dis[s][d] > dis[s][k]+ dis[k][d]){
                        dis[s][d]= dis[s][k]+ dis[k][d];
                    }
                }
            }
        }
        long ans=0;
        long src_len= source.length();
        for(int i=0;i<src_len;i++){
            int src= source.charAt(i)-'a';
            int des= target.charAt(i)-'a';
            long res= dis[src][des];
            if(res==maxi) return -1;
            ans+=res;
        }
        return ans;
    }
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        // return using_dijkstra_algo(source,target,original,changed,cost);
        return using_floyd_warshall_algo(source,target,original,changed,cost);
    }
}
