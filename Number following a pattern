Given a pattern containing only I's and D's. I for increasing and D for decreasing. Devise an algorithm to print the minimum number following that pattern. Digits from 1-9 and digits can't repeat.

Example 1:

Input:
D
Output:
21
Explanation:
D is meant for decreasing, so we choose the minimum number among all possible numbers like 21,31,54,87,etc.
Example 2:

Input:
IIDDD
Output:
126543
Explanation:
Above example is self- explanatory,
1 < 2 < 6 > 5 > 4 > 3
  I - I - D - D - D

Code starts from here;;
class Solution {
    public static String printMinNumberForPattern(String pattern) {
       
        Stack<Integer> stack = new Stack<>();
        
        
        StringBuilder result = new StringBuilder();
        
        
        int num = 1;

        // Traverse the pattern
        for (char ch : pattern.toCharArray()) {
           
            stack.push(num++);

           
            if (ch == 'I') {
                while (!stack.isEmpty()) {
                    result.append(stack.pop());
                }
            }
        }

        // Push the last number and empty the stack
        stack.push(num);
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }
}

